generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BudgetPeriod {
  weekly
  monthly
}

model Family {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  nameCipher    String
  region        String?
  
  // Internationalization
  language      String          @default("en") // en, fr, de, it, es, ro, uk, zh, ar (Arabic)
  currency      String          @default("GBP") // GBP, EUR, RON, UAH, CNY, ETB
  
  // Budget management
  maxBudgetPence Int?           // Max pocket money budget
  budgetPeriod   BudgetPeriod?  @default(weekly) // weekly or monthly
  budgetStartDate DateTime?      // When the current budget period started
  showLifetimeEarnings Boolean @default(true) // Toggle to show/hide lifetime earnings on child portal
  
  // Login tracking for auto-delete
  lastLoginAt   DateTime?       // When ANY family member last logged in
  suspendedAt   DateTime?       // When account was suspended (for 12-month deletion)

  // Back-relations
  members       FamilyMember[]
  children      Child[]
  chores        Chore[]
  assignments   Assignment[]
  bids          Bid[]
  completions   Completion[]
  streaks       Streak[]
  bonusRules    BonusRule[]
  penaltyRules  PenaltyRule[]
  wallets       Wallet[]
  transactions  Transaction[]
  payouts       Payout[]
  rewards       Reward[]
  redemptions   Redemption[]
  rivalry       RivalryEvent[]
  audit         AuditLog[]
  childJoinCodes ChildJoinCode[]
  authTokens    AuthToken[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())

  members   FamilyMember[]
}

enum Role {
  parent_admin        // Full control - can invite others, manage all settings
  parent_co_parent    // Can manage chores, children, but not invite other parents
  parent_viewer       // Can view but not edit
  grandparent         // Can view children, send gifts, limited permissions
  uncle_aunt          // Can view children, send gifts, limited permissions
  relative_contributor // Can contribute to rewards
  child_player        // Child access
}

model FamilyMember {
  id        String   @id @default(uuid())
  familyId  String
  userId    String
  role      Role
  invitedBy String?
  createdAt DateTime @default(now())
  scopeJson Json?

  family    Family  @relation(fields: [familyId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@index([familyId, role])
}

enum Gender {
  male
  female
  other
}

model Child {
  id             String   @id @default(uuid())
  familyId       String
  nickname       String
  realNameCipher String?
  dobCipher      String?
  avatarId       String?
  ageGroup       String?
  gender         Gender?
  email          String?  // Optional email address for child
  theme          String?  @default("superhero") // Theme selection: superhero, unicorn, ocean, sunset, neon-city, galaxy, high-contrast
  
  // Birthday tracking for age-appropriate rewards (COPPA/GDPR-friendly)
  birthMonth     Int?     // 1-12, optional
  birthYear      Int?     // e.g., 2015, optional
  
  // Interests for personalized rewards (JSON array of tags)
  interestsJson  Json?    // e.g., ["pets","reading","music","sports"]
  
  createdAt      DateTime @default(now())

  family       Family      @relation(fields: [familyId], references: [id])
  streaks      Streak[]
  wallets      Wallet[]
  assignments  Assignment[]
  bids         Bid[]
  completions  Completion[]
  redemptions  Redemption[]
  payouts      Payout[]
  joinCodeUsed ChildJoinCode?

  @@index([familyId])
}

enum Frequency {
  daily
  weekly
  once
}

enum ProofType {
  none
  note
}

enum BidStatus {
  open
  won
  lost
}

enum CompletionStatus {
  pending
  approved
  rejected
}

model Chore {
  id              String    @id @default(uuid())
  familyId        String
  title           String
  description     String?
  frequency       Frequency
  proof           ProofType @default(none)
  baseRewardPence Int
  starsOverride   Int?       // Custom star amount (overrides auto-calculation)
  minBidPence     Int?
  maxBidPence     Int?
  startDate       DateTime?
  endDate         DateTime?
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())

  family      Family       @relation(fields: [familyId], references: [id])
  assignments Assignment[]
  streaks     Streak[]

  @@index([familyId, active])
}

model Assignment {
  id                 String   @id @default(uuid())
  choreId            String
  familyId           String
  childId            String?
  biddingEnabled     Boolean  @default(false)
  linkedAssignmentId String?
  createdAt          DateTime @default(now())

  chore       Chore      @relation(fields: [choreId], references: [id])
  family      Family     @relation(fields: [familyId], references: [id])
  child       Child?     @relation(fields: [childId], references: [id])
  bids        Bid[]
  completions Completion[]

  @@index([familyId, childId])
}

model Bid {
  id                   String    @id @default(uuid())
  assignmentId         String
  familyId             String
  childId              String
  amountPence          Int
  status               BidStatus @default(open)
  disruptTargetChildId String?
  createdAt            DateTime  @default(now())

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  family     Family     @relation(fields: [familyId], references: [id])
  child      Child      @relation(fields: [childId], references: [id])

  @@index([familyId, assignmentId, status])
}

model Completion {
  id              String            @id @default(uuid())
  assignmentId    String
  familyId        String
  childId         String
  timestamp       DateTime          @default(now())
  proofUrl        String?
  note            String?
  status          CompletionStatus  @default(pending)
  bidAmountPence  Int?              // The actual bid amount if this was a challenge chore

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  family     Family     @relation(fields: [familyId], references: [id])
  child      Child      @relation(fields: [childId], references: [id])

  @@index([familyId, childId, status])
}

model Streak {
  id                 String   @id @default(uuid())
  familyId           String
  childId            String
  choreId            String
  current            Int      @default(0)
  best               Int      @default(0)
  lastIncrementDate  DateTime?
  isDisrupted        Boolean  @default(false)

  family    Family @relation(fields: [familyId], references: [id])
  child     Child  @relation(fields: [childId], references: [id])
  chore     Chore  @relation(fields: [choreId], references: [id])

  @@index([familyId, childId, choreId])
}

model BonusRule {
  id       String  @id @default(uuid())
  familyId String
  ruleJson Json
  enabled  Boolean @default(true)

  family   Family  @relation(fields: [familyId], references: [id])

  @@index([familyId, enabled])
}

model PenaltyRule {
  id       String  @id @default(uuid())
  familyId String
  ruleJson Json
  enabled  Boolean @default(true)

  family   Family  @relation(fields: [familyId], references: [id])

  @@index([familyId, enabled])
}

model Wallet {
  id           String   @id @default(uuid())
  familyId     String
  childId      String
  balancePence Int      @default(0)
  stars        Int      @default(0)  // Separate star balance for rewards/gifts

  family    Family   @relation(fields: [familyId], references: [id])
  child     Child    @relation(fields: [childId], references: [id])
  transactions Transaction[]

  @@unique([childId, familyId])
  @@index([familyId, childId])
}

enum TxType {
  credit
  debit
}

enum TxSource {
  system
  parent
  relative
}

model Transaction {
  id          String   @id @default(uuid())
  walletId    String
  familyId    String
  type        TxType
  amountPence Int
  source      TxSource @default(system)
  metaJson    Json?
  createdAt   DateTime @default(now())

  wallet  Wallet @relation(fields: [walletId], references: [id])
  family  Family @relation(fields: [familyId], references: [id])

  @@index([familyId, createdAt])
}

model Payout {
  id          String   @id @default(uuid())
  familyId    String
  childId     String
  amountPence Int
  paidBy      String?  // userId of parent who paid
  method      String?  // "cash", "bank_transfer", "other"
  note        String?
  createdAt   DateTime @default(now())

  family  Family @relation(fields: [familyId], references: [id])
  child   Child  @relation(fields: [childId], references: [id])

  @@index([familyId, childId, createdAt])
}

enum RewardType {
  affiliate
  custom
}

model Reward {
  id           String    @id @default(uuid())
  familyId     String
  type         RewardType
  sku          String?
  title        String
  description  String?
  imageUrl     String?
  amazonUrl    String?
  affiliateTag String?
  daysOutUrl   String?   // For days out/experiences affiliate links
  starsRequired Int
  pricePence   Int?
  ageTag       String?   // e.g., "5-8", "9-11", "12-15"
  genderTag    String?   // e.g., "male", "female", "both"
  category     String?   // e.g., "toys", "books", "experiences", "allowance"
  createdAt    DateTime  @default(now())

  family      Family       @relation(fields: [familyId], references: [id])
  redemptions Redemption[]

  @@index([familyId, type])
}

model Redemption {
  id             String   @id @default(uuid())
  rewardId       String?  // Custom reward (parent-created)
  affiliateRewardId String?  // Affiliate reward (from providers)
  familyId       String
  childId        String
  costPaid       Int      // Stars spent
  status         String   @default("pending")
  createdAt      DateTime @default(now())

  reward          Reward?     @relation(fields: [rewardId], references: [id])
  affiliateReward RewardItem? @relation(fields: [affiliateRewardId], references: [id])
  family          Family      @relation(fields: [familyId], references: [id])
  child           Child       @relation(fields: [childId], references: [id])
  
  @@index([familyId, status])
  @@index([childId, createdAt])
}

model RivalryEvent {
  id            String   @id @default(uuid())
  familyId      String
  actorChildId  String
  targetChildId String?
  type          String
  amountPence   Int?
  createdAt     DateTime @default(now())
  metaJson      Json?

  family  Family @relation(fields: [familyId], references: [id])

  @@index([familyId, createdAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  familyId  String
  actorId   String?
  action    String
  target    String?
  metaJson  Json?
  createdAt DateTime @default(now())

  family  Family @relation(fields: [familyId], references: [id])

  @@index([familyId, createdAt])
}

model AuthToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  type      String   // 'magic_link' or 'child_join'
  familyId  String?  // null for new parents, set for family invites
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  family    Family?  @relation(fields: [familyId], references: [id])

  @@index([email, token])
  @@index([expiresAt])
}

model ChildJoinCode {
  id        String   @id @default(uuid())
  familyId  String
  code      String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  usedAt    DateTime?
  usedByChildId String? @unique

  family Family @relation(fields: [familyId], references: [id])
  usedByChild Child? @relation(fields: [usedByChildId], references: [id])

  @@index([code])
  @@index([expiresAt])
}

// ============================================================================
// AFFILIATE REWARDS SYSTEM
// ============================================================================

enum RewardProvider {
  amazon
  ebay
  argos
  ticketmaster
  custom
}

enum AgeTag {
  toddler_2_4
  kid_5_8
  tween_9_11
  teen_12_15
  young_adult_16_18
  all_ages
}

enum GenderTag {
  male
  female
  both
  unisex
}

// Affiliate provider configuration (admin-only)
model RewardSource {
  id            String         @id @default(uuid())
  provider      RewardProvider
  affiliateTag  String         // e.g., Amazon Associates tracking ID
  apiKey        String?        // Encrypted API key for PA-API
  apiSecret     String?        // Encrypted API secret
  enabled       Boolean        @default(true)
  region        String?        // e.g., "UK", "US"
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([provider, region])
  @@index([provider, enabled])
}

// Reward items from affiliate providers
model RewardItem {
  id              String         @id @default(uuid())
  provider        RewardProvider
  externalId      String?        // Provider's product ID (e.g., ASIN)
  title           String
  description     String?        @db.Text
  imageUrl        String?
  affiliateUrl    String         // Full affiliate link with tracking
  
  // Pricing (in pence, cached from provider)
  pricePence      Int?
  priceUpdatedAt  DateTime?      // For 24h cache rule (Amazon PA-API requirement)
  
  // Categorization
  ageTag          AgeTag         @default(all_ages)
  genderTag       GenderTag      @default(both)
  category        String?        // toys, books, craft, STEM, sports, experiences, gift_cards
  interestTags    Json?          // ["pets","reading","music"] for matching
  
  // Gamification
  starsRequired   Int?           // Suggested stars needed (derived from price)
  
  // Quality & ranking signals
  popularityScore Float          @default(0.0) // Based on clicks/conversions
  featured        Boolean        @default(false) // Admin-curated
  blocked         Boolean        @default(false) // Admin-blocked
  
  // Metadata
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastSyncedAt    DateTime?      // Last time refreshed from provider
  
  // Relations
  clicks          RewardClick[]
  purchases       RewardPurchase[]
  redemptions     Redemption[]

  @@index([provider, ageTag, genderTag, blocked])
  @@index([featured, blocked])
  @@index([popularityScore])
  @@index([priceUpdatedAt]) // For cache expiry queries
}

// Click tracking (privacy-safe, no PII)
model RewardClick {
  id         String    @id @default(uuid())
  rewardId   String
  familyId   String
  childId    String?   // Optional: which child viewed it
  userId     String?   // Optional: parent who clicked
  clickedAt  DateTime  @default(now())
  userAgent  String?   // For bot detection
  
  reward     RewardItem @relation(fields: [rewardId], references: [id])
  
  @@index([rewardId, clickedAt])
  @@index([familyId, clickedAt])
}

// Purchase tracking (optional, for conversion metrics)
// Note: This is populated via webhook/callback if provider supports it
model RewardPurchase {
  id              String    @id @default(uuid())
  rewardId        String
  familyId        String
  clickId         String?   // Link to original click
  
  // Purchase details (no PII, just metrics)
  purchasedAt     DateTime  @default(now())
  amountPence     Int?      // Purchase value
  commissionPence Int?      // Earned commission
  
  // Provider metadata (for reconciliation)
  providerOrderId String?   // Provider's order reference
  status          String?   // pending, confirmed, cancelled
  
  reward          RewardItem @relation(fields: [rewardId], references: [id])
  
  @@index([rewardId, purchasedAt])
  @@index([familyId, purchasedAt])
}

// Parent reward preferences (budget, categories, etc.)
model ParentRewardPreferences {
  id               String   @id @default(uuid())
  familyId         String   @unique
  
  // Budget controls
  maxRewardPence   Int?     // Max reward value to show
  
  // Category filters
  allowedCategories Json?   // ["toys","books","craft"] - null = all
  blockedCategories Json?   // ["electronics","sweets"]
  
  // Content controls
  curatedOnlyMode  Boolean  @default(false) // Only show featured items
  affiliateOptIn   Boolean  @default(true)  // Consent to show affiliate items
  
  // Birthday magic
  birthdayBonusEnabled Boolean @default(true) // Double stars in birthday month
  
  // Pinned/blocked items
  pinnedRewardIds  Json?    // Array of reward IDs to show first
  blockedRewardIds Json?    // Array of reward IDs to never show
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([familyId])
}

model Admin {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String
  name              String?
  isActive          Boolean   @default(false)
  emailVerified     Boolean   @default(false)
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?   // For TOTP (optional)
  lastLoginAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Email verification
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  
  // 2FA codes
  twoFactorCodes    TwoFactorCode[]
}

model TwoFactorCode {
  id        String   @id @default(uuid())
  adminId   String
  code      String   // 6-digit code
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@index([adminId, expiresAt])
}

