generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

model Family {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  nameCipher   String
  region       String?
  members      FamilyMember[]
  children     Child[]
  chores       Chore[]
  rewards      Reward[]
  audit        AuditLog[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  members   FamilyMember[]
  transactions Transaction[]
}

enum Role {
  parent_admin
  parent_viewer
  relative_contributor
  child_player
}

model FamilyMember {
  id        String   @id @default(uuid())
  familyId  String
  userId    String
  role      Role
  invitedBy String?
  createdAt DateTime @default(now())
  scopeJson Json?

  family    Family  @relation(fields: [familyId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@index([familyId, role])
}

model Child {
  id           String   @id @default(uuid())
  familyId     String
  nickname     String
  realNameCipher String?
  dobCipher    String?
  avatarId     String?
  ageGroup     String?
  createdAt    DateTime @default(now())

  family       Family   @relation(fields: [familyId], references: [id])
  streaks      Streak[]
  wallets      Wallet[]
  assignments  Assignment[]
  bids         Bid[]
  completions  Completion[]
  redemptions  Redemption[]

  @@index([familyId])
}

enum Frequency { daily weekly once }
enum ProofType { none photo note }
enum BidStatus { open won lost }
enum CompletionStatus { pending approved rejected }

model Chore {
  id          String   @id @default(uuid())
  familyId    String
  title       String
  description String?
  frequency   Frequency
  proof       ProofType @default(none)
  baseRewardPence Int
  minBidPence Int?
  maxBidPence Int?
  startDate   DateTime?
  endDate     DateTime?
  active      Boolean  @default(true)

  family      Family   @relation(fields: [familyId], references: [id])
  assignments Assignment[]
  @@index([familyId, active])
}

model Assignment {
  id          String  @id @default(uuid())
  choreId     String
  familyId    String
  childId     String?
  biddingEnabled Boolean @default(false)
  linkedAssignmentId String?

  chore       Chore   @relation(fields: [choreId], references: [id])
  family      Family  @relation(fields: [familyId], references: [id])
  child       Child?  @relation(fields: [childId], references: [id])
  bids        Bid[]
  completions Completion[]

  @@index([familyId, childId])
}

model Bid {
  id        String   @id @default(uuid())
  assignmentId String
  familyId  String
  childId   String
  amountPence Int
  status    BidStatus @default(open)
  disruptTargetChildId String?
  createdAt DateTime @default(now())

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  family     Family     @relation(fields: [familyId], references: [id])
  child      Child      @relation(fields: [childId], references: [id])

  @@index([familyId, assignmentId, status])
}

model Completion {
  id        String   @id @default(uuid())
  assignmentId String
  familyId  String
  childId   String
  timestamp DateTime @default(now())
  proofUrl  String?
  note      String?
  status    CompletionStatus @default(pending)

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  family     Family     @relation(fields: [familyId], references: [id])
  child      Child      @relation(fields: [childId], references: [id])

  @@index([familyId, childId, status])
}

model Streak {
  id        String   @id @default(uuid())
  familyId  String
  childId   String
  choreId   String
  current   Int      @default(0)
  best      Int      @default(0)
  lastIncrementDate DateTime?
  isDisrupted Boolean @default(false)

  family    Family   @relation(fields: [familyId], references: [id])
  child     Child    @relation(fields: [childId], references: [id])
  chore     Chore    @relation(fields: [choreId], references: [id])

  @@index([familyId, childId, choreId])
}

model BonusRule {
  id        String   @id @default(uuid())
  familyId  String
  ruleJson  Json
  enabled   Boolean  @default(true)

  family    Family   @relation(fields: [familyId], references: [id])
  @@index([familyId, enabled])
}

model PenaltyRule {
  id        String   @id @default(uuid())
  familyId  String
  ruleJson  Json
  enabled   Boolean  @default(true)

  family    Family   @relation(fields: [familyId], references: [id])
  @@index([familyId, enabled])
}

model Wallet {
  id        String   @id @default(uuid())
  familyId  String
  childId   String
  balancePence Int   @default(0)

  family    Family   @relation(fields: [familyId], references: [id])
  child     Child    @relation(fields: [childId], references: [id])

  transactions Transaction[]
  @@index([familyId, childId])
}

enum TxType { credit debit }
enum TxSource { system parent relative }

model Transaction {
  id        String   @id @default(uuid())
  walletId  String
  familyId  String
  type      TxType
  amountPence Int
  source    TxSource @default(system)
  metaJson  Json?
  createdAt DateTime @default(now())

  wallet    Wallet   @relation(fields: [walletId], references: [id])
  family    Family   @relation(fields: [familyId], references: [id])

  @@index([familyId, createdAt])
}

enum RewardType { affiliate custom }

model Reward {
  id        String   @id @default(uuid())
  familyId  String
  type      RewardType
  sku       String?
  title     String
  imageUrl  String?
  amazonUrl String?
  affiliateTag String?
  starsRequired Int
  pricePence Int?
  ageTag    String?
  createdAt DateTime @default(now())

  family    Family   @relation(fields: [familyId], references: [id])
  redemptions Redemption[]

  @@index([familyId, type])
}

model Redemption {
  id        String   @id @default(uuid())
  rewardId  String
  familyId  String
  childId   String
  status    String   @default("pending")
  createdAt DateTime @default(now())

  reward    Reward @relation(fields: [rewardId], references: [id])
  family    Family @relation(fields: [familyId], references: [id])
  child     Child  @relation(fields: [childId], references: [id])
}

model RivalryEvent {
  id        String   @id @default(uuid())
  familyId  String
  actorChildId String
  targetChildId String?
  type      String
  amountPence Int?
  createdAt DateTime @default(now())
  metaJson  Json?

  family    Family @relation(fields: [familyId], references: [id])

  @@index([familyId, createdAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  familyId  String
  actorId   String?
  action    String
  target    String?
  metaJson  Json?
  createdAt DateTime @default(now())

  family    Family @relation(fields: [familyId], references: [id])

  @@index([familyId, createdAt])
}
